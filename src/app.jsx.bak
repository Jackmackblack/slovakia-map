import { geoJsonData } from './pois.js';

import Autosuggest from 'react-autosuggest';

const suggestions = geoJsonData.features.map(poi => poi.properties.name);
const getSuggestions = value => {
  const inputValue = value.trim().toLowerCase();
  return inputValue.length === 0 ? [] : suggestions.filter(name => name.toLowerCase().includes(inputValue));
};

const [suggestionsList, setSuggestionsList] = useState([]);

<Autosuggest
  suggestions={suggestionsList}
  onSuggestionsFetchRequested={({ value }) => setSuggestionsList(getSuggestions(value))}
  onSuggestionsClearRequested={() => setSuggestionsList([])}
  getSuggestionValue={suggestion => suggestion}
  renderSuggestion={suggestion => <div className="p-2 hover:bg-gray-100">{suggestion}</div>}
  inputProps={{
    placeholder: 'Search POIs...',
    value: searchQuery,
    onChange: (e, { newValue }) => handleSearch({ target: { value: newValue } }),
    className: 'w-full border p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500'
  }}
  theme={{
    suggestionsContainer: 'bg-white border rounded shadow mt-1',
    suggestionHighlighted: 'bg-gray-200'
  }}
/>
import { debounce } from 'lodash';

const debouncedSearch = debounce((query) => {
  setSearchQuery(query);
  setPois(query ? geoJsonData.features.filter(poi => poi.properties.name.toLowerCase().includes(query)) : geoJsonData.features);
}, 300);

const handleSearch = (e) => debouncedSearch(e.target.value.toLowerCase());
const { useState, useEffect, useCallback, useRef, memo } = React;

const Legend = () => (
  <div className="absolute bottom-4 right-4 bg-white p-3 rounded-lg shadow">
    <h4 className="font-bold text-gray-800">Legend</h4>
    <div className="flex items-center mt-2"><div className="w-3 h-3 bg-red-500 mr-2"></div><span>Castle</span></div>
    <div className="flex items-center mt-1"><div className="w-3 h-3 bg-purple-500 mr-2"></div><span>Museum</span></div>
    <div className="flex items-center mt-1"><div className="w-3 h-3 bg-cyan-500 mr-2"></div><span>Cave</span></div>
    <div className="flex items-center mt-1"><div className="w-3 h-3 bg-green-500 mr-2"></div><span>Nature</span></div>
    <div className="flex items-center mt-1"><div className="w-3 h-3 bg-yellow-500 mr-2"></div><span>Church</span></div>
    <div className="flex items-center mt-1"><div className="w-3 h-3 bg-pink-500 mr-2"></div><span>Village</span></div>
    <div className="flex items-center mt-1"><div className="w-3 h-3 bg-rose-400 mr-2"></div><span>Spa</span></div>
  </div>
);

const MapComponent = memo(({ pois, onSelectPoi, selectedPois, routeGeoJson }) => {
  const mapRef = useRef(null);

useEffect(() => {
  if (!mapRef.current) {
    mapRef.current = L.map('map').setView([48.669, 19.699], 8);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'Â© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(mapRef.current);
    markersRef.current = L.markerClusterGroup();
    mapRef.current.addLayer(markersRef.current);
  }
}, []);

useEffect(() => {
  if (markersRef.current) {
    markersRef.current.clearLayers();
    const geoJsonLayer = L.geoJSON(pois, {
      pointToLayer: (feature, latlng) => {
        return L.circleMarker(latlng, {
          radius: 8,
          color: feature.properties.type === "castle" ? "#ff5733" :
                 feature.properties.type === "museum" ? "#9933cc" :
                 feature.properties.type === "cave" ? "#33ccff" :
                 feature.properties.type === "nature" ? "#33cc33" :
                 feature.properties.type === "church" ? "#ffcc00" :
                 feature.properties.type === "village" ? "#cc6699" :
                 feature.properties.type === "spa" ? "#ff99cc" : "#ff0000",
          fillOpacity: 0.8
        });
      },
      onEachFeature: (feature, layer) => {
        const { name, type, description, image } = feature.properties;
        const popupContent = [
          '<div class="p-3 max-w-xs bg-white rounded shadow">',
          `<h3 class="text-lg font-bold text-gray-800">${name}</h3>`,
          `<p class="text-sm text-gray-600"><strong>Type:</strong> ${type.charAt(0).toUpperCase() + type.slice(1)}</p>`,
          `<p class="text-sm text-gray-600"><strong>Description:</strong> ${description}</p>`,
          image ? `<img src="${image}" alt="${name}" class="mt-2 w-full h-auto rounded" loading="lazy" />` : '',
          '</div>'
        ].join('');
        layer.bindPopup(popupContent, { maxWidth: 300 });
        layer.on('click', () => onSelectPoi(feature));
      }
    });
    markersRef.current.addLayer(geoJsonLayer);
  }
}, [pois, onSelectPoi]);

useEffect(() => {
  if (mapRef.current && routeGeoJson) {
    const routeLayer = L.geoJSON(routeGeoJson, {
      style: { color: '#ff0000', weight: 5 }
    }).addTo(mapRef.current);
    mapRef.current.fitBounds(routeLayer.getBounds());
    return () => mapRef.current.removeLayer(routeLayer);
  }
}, [routeGeoJson]);
return (
  <div className="relative">
    <div id="map" className="mb-4 h-[500px] w-full rounded-lg shadow"></div>
    <Legend />
  </div>
);
  }, [pois, onSelectPoi, routeGeoJson]);

  return <div id="map" className="mb-4"></div>;
});

function App() {
  const [pois, setPois] = useState(geoJsonData.features);
  const [selectedPois, setSelectedPois] = useState([]);
  const [routeInfo, setRouteInfo] = useState(null);
  const [routeGeoJson, setRouteGeoJson] = useState(null);

  const handleSelectPoi = useCallback((poi) => {
    setSelectedPois((prev) => {
      if (prev.length >= 2) return [prev[1], poi];
      if (prev.includes(poi)) return prev;
      return [...prev, poi];
    });
  }, []);

  const handleCalculateRoute = useCallback(async () => {
    if (selectedPois.length !== 2) return;
    const [poi1, poi2] = selectedPois;
    try {
const response = await fetch(
  `https://api.allorigins.win/raw?url=${encodeURIComponent(`http://router.project-osrm.org/route/v1/driving/${poi1.geometry.coordinates[0]},${poi1.geometry.coordinates[1]};${poi2.geometry.coordinates[0]},${poi2.geometry.coordinates[1]}?overview=full&geometries=geojson`)}`
);
      const data = await response.json();
      if (data.routes && data.routes[0]) {
        setRouteInfo({
          distance: (data.routes[0].distance / 1000).toFixed(1), // km
          duration: (data.routes[0].duration / 3600).toFixed(1), // hours
        });
        setRouteGeoJson(data.routes[0].geometry);
      } else {
        alert('No route found');
      }
    } catch (error) {
      console.error('Route error:', error);
      alert('Failed to calculate route');
    }
  }, [selectedPois]);

  const handleClearRoute = useCallback(() => {
    setSelectedPois([]);
    setRouteInfo(null);
    setRouteGeoJson(null);
  }, []);

  // Filter and search logic
  const [filterType, setFilterType] = useState('');
  const [searchDistance, setSearchDistance] = useState('');
  const [searchCenter, setSearchCenter] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');

  const handleFilterChange = (e) => {
    const type = e.target.value;
    setFilterType(type);
    setPois(type ? geoJsonData.features.filter((poi) => poi.properties.type === type) : geoJsonData.features);
  };

  const handleZoom = (coords) => {
    const filtered = searchDistance && coords
      ? geoJsonData.features.filter((poi) => {
          const [lon, lat] = poi.geometry.coordinates;
          const distance = Math.sqrt(
            Math.pow(lon - coords[0], 2) + Math.pow(lat - coords[1], 2)
          ) * 111; // Approx km
          return distance <= parseFloat(searchDistance);
        })
      : geoJsonData.features;
    setPois(filtered);
    setSearchCenter(coords);
  };

  const handleSearch = (e) => {
    const query = e.target.value.toLowerCase();
    setSearchQuery(query);
    setPois(
      query
        ? geoJsonData.features.filter((poi) =>
            poi.properties.name.toLowerCase().includes(query)
          )
        : geoJsonData.features
    );
  };

  return (
<div className="container mx-auto p-6 bg-gray-50 min-h-screen">
  <h1 className="text-3xl font-bold text-center text-blue-600 mb-6">Slovakia Tourist Map</h1>
  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
    <div className="col-span-1">
      <div className="bg-white p-4 rounded-lg shadow">
        <select onChange={handleFilterChange} className="w-full border p-2 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500">
          <option value="">All Types</option>
          <option value="castle">Castle</option>
          <option value="museum">Museum</option>
          <option value="cave">Cave</option>
          <option value="nature">Nature</option>
          <option value="church">Church</option>
          <option value="village">Village</option>
          <option value="spa">Spa</option>
        </select>
        <input
          type="text"
          placeholder="Search POIs..."
          value={searchQuery}
          onChange={handleSearch}
          className="w-full border p-2 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <input
          type="number"
          placeholder="Distance (km)"
          value={searchDistance}
          onChange={(e) => setSearchDistance(e.target.value)}
          className="w-full border p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
    </div>
    <div className="col-span-2">
      <MapComponent pois={pois} onSelectPoi={handleSelectPoi} selectedPois={selectedPois} routeGeoJson={routeGeoJson} />
    </div>
  </div>
  {selectedPois.length > 0 && (
    <div className="mt-6 p-4 bg-blue-100 rounded-lg shadow">
      <p className="text-gray-800"><strong>Selected POIs:</strong> {selectedPois.map(p => p.properties.name).join(' to ')}</p>
      {routeInfo && (
        <>
          <p className="text-gray-800"><strong>Distance:</strong> {routeInfo.distance} km</p>
          <p className="text-gray-800"><strong>Duration:</strong> {routeInfo.duration} hours</p>
        </>
      )}
      <button onClick={handleCalculateRoute} className="mt-2 bg-blue-600 text-white p-2 rounded hover:bg-blue-700 mr-2" disabled={selectedPois.length !== 2}>
        Calculate Route
      </button>
      <button onClick={handleClearRoute} className="mt-2 bg-red-600 text-white p-2 rounded hover:bg-red-700">
        Clear Route
      </button>
    </div>
  )}
  <div className="mt-6 bg-white p-4 rounded-lg shadow">
    <h2 className="text-xl font-semibold text-gray-800 mb-4">Available POIs</h2>
    <div className="space-y-4">
      {pois.map((poi, index) => (
        <div key={index} className="p-3 bg-gray-50 rounded-md hover:bg-gray-100 transition">
          <h3 className="text-lg font-semibold text-gray-900">{poi.properties.name}</h3>
          <p className="text-sm text-gray-600"><strong>Type:</strong> {poi.properties.type.charAt(0).toUpperCase() + poi.properties.type.slice(1)}</p>
          <p className="text-sm text-gray-600"><strong>Description:</strong> {poi.properties.description}</p>
        </div>
      ))}
    </div>
  </div>
</div>
  );
}

ReactDOM.render(<App />, document.getElementById('root'));